const { db } = require('./config/firebase');
const { 
    collection, 
    doc, 
    setDoc, 
    addDoc,
    getDocs,
    query,
    where 
} = require('firebase/firestore');

// Importar dados existentes
const coursesData = require('./data/courses.json');
const placasData = require('./data/placas.json');
const transitoData = require('./data/transito.json');

async function setupFirestoreCollections() {
    console.log('üöÄ Iniciando configura√ß√£o das cole√ß√µes do Firestore...\n');

    try {
        // 1. Cole√ß√£o: users (j√° configurada pelo firebaseService)
        console.log('1Ô∏è‚É£ Verificando cole√ß√£o "users"...');
        console.log('‚úÖ Cole√ß√£o "users" ser√° criada automaticamente quando necess√°rio\n');

        // 2. Cole√ß√£o: courses
        console.log('2Ô∏è‚É£ Configurando cole√ß√£o "courses"...');
        for (const course of coursesData.courses) {
            try {
                await setDoc(doc(db, 'courses', course.id), {
                    ...course,
                    createdAt: new Date(),
                    updatedAt: new Date()
                });
                console.log(`   ‚úÖ Curso "${course.title}" adicionado`);
            } catch (error) {
                console.log(`   ‚ö†Ô∏è Erro ao adicionar curso "${course.title}": ${error.message}`);
            }
        }
        console.log('‚úÖ Cole√ß√£o "courses" configurada\n');

        // 3. Cole√ß√£o: placas
        console.log('3Ô∏è‚É£ Configurando cole√ß√£o "placas"...');
        
        // Adicionar placas de regulamenta√ß√£o
        for (const placa of placasData.regulamentacao) {
            try {
                await setDoc(doc(db, 'placas', placa.id), {
                    ...placa,
                    categoria: 'regulamentacao',
                    createdAt: new Date(),
                    updatedAt: new Date()
                });
                console.log(`   ‚úÖ Placa "${placa.nome}" (regulamenta√ß√£o) adicionada`);
            } catch (error) {
                console.log(`   ‚ö†Ô∏è Erro ao adicionar placa "${placa.nome}": ${error.message}`);
            }
        }

        // Adicionar placas de advert√™ncia
        for (const placa of placasData.advertencia) {
            try {
                await setDoc(doc(db, 'placas', placa.id), {
                    ...placa,
                    categoria: 'advertencia',
                    createdAt: new Date(),
                    updatedAt: new Date()
                });
                console.log(`   ‚úÖ Placa "${placa.nome}" (advert√™ncia) adicionada`);
            } catch (error) {
                console.log(`   ‚ö†Ô∏è Erro ao adicionar placa "${placa.nome}": ${error.message}`);
            }
        }
        console.log('‚úÖ Cole√ß√£o "placas" configurada\n');

        // 4. Cole√ß√£o: questions
        console.log('4Ô∏è‚É£ Configurando cole√ß√£o "questions"...');
        for (const question of transitoData) {
            try {
                await setDoc(doc(db, 'questions', question.id), {
                    ...question,
                    createdAt: new Date(),
                    updatedAt: new Date()
                });
                console.log(`   ‚úÖ Quest√£o "${question.id}" adicionada`);
            } catch (error) {
                console.log(`   ‚ö†Ô∏è Erro ao adicionar quest√£o "${question.id}": ${error.message}`);
            }
        }
        console.log('‚úÖ Cole√ß√£o "questions" configurada\n');

        // 5. Cole√ß√£o: user_progress (para acompanhar progresso dos usu√°rios)
        console.log('5Ô∏è‚É£ Verificando cole√ß√£o "user_progress"...');
        console.log('‚úÖ Cole√ß√£o "user_progress" ser√° criada automaticamente quando necess√°rio\n');

        // 6. Cole√ß√£o: user_scores (para pontua√ß√µes e rankings)
        console.log('6Ô∏è‚É£ Verificando cole√ß√£o "user_scores"...');
        console.log('‚úÖ Cole√ß√£o "user_scores" ser√° criada automaticamente quando necess√°rio\n');

        // 7. Cole√ß√£o: flashcards
        console.log('7Ô∏è‚É£ Verificando cole√ß√£o "flashcards"...');
        console.log('‚úÖ Cole√ß√£o "flashcards" ser√° criada automaticamente quando necess√°rio\n');

        console.log('üéâ Configura√ß√£o das cole√ß√µes conclu√≠da com sucesso!');
        console.log('\nüìä Resumo das cole√ß√µes criadas:');
        console.log('   - users (criada automaticamente)');
        console.log('   - courses (dados importados)');
        console.log('   - placas (dados importados)');
        console.log('   - questions (dados importados)');
        console.log('   - user_progress (criada automaticamente)');
        console.log('   - user_scores (criada automaticamente)');
        console.log('   - flashcards (criada automaticamente)');

    } catch (error) {
        console.error('‚ùå Erro na configura√ß√£o:', error.message);
        console.log('\nüîß Verifique:');
        console.log('   - Conex√£o com Firebase');
        console.log('   - Permiss√µes do Firestore');
        console.log('   - Regras de seguran√ßa');
    }
}

// Executar configura√ß√£o
setupFirestoreCollections(); 